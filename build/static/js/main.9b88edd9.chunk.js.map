{"version":3,"sources":["constants/regex.js","constants/table.js","utils/helper.js","handson-table/handson-table.js","functions/machine-learning-functions.js","components/PredictionModule.js","components/Wrapper.js","components/ModelComplexityWrapper.js","serviceWorker.js","index.js","App.js"],"names":["editMode","addCase","replaceCase","selectable","beforeSelection","singleSelection","colDiff","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","rowDiff","detectNextStop","data","start","unit","skipIndex","index","seekData","length","getActiveSelection","editorText","rowHeaders","colHeaders","tempArray","strBeforeSelection","match","regex","selectionStr","slice","activeSelection","split","forEach","selection","cols","rows","selectionArray","i","push","indexOf","parseInt","parseSelection","HandsonTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","originValue","tempValue","isSelectable","activeCell","activeEditor","lastSelection","ongoingSelction","hotSettings","objectSpread","hotTable","React","createRef","isCtrlKeyDown","isShiftKeyDown","selectionMode","totalRows","minRows","totalCols","minCols","onDocumentKeyUp","bind","assertThisInitialized","parseCellData","activateEditor","completeEditing","handleBeforeKeyDown","handleAfterSelection","handleBeforeOnCellMouseDown","handleAfterBeginEditing","handleAfterOnCellMouseDown","handleAfterOnCellMouseUp","updateColumnHeaders","updateRowHeaders","setHotInstance","current","hotInstance","ctrlOrMeta","window","navigator","platform","document","addEventListener","removeEventListener","ev","metaKey","ctrlKey","shiftKey","getColHeader","getRowHeader","r1","c1","getActiveEditor","isEditing","getSourceDataAtCell","toUpperCase","setValue","test","_getActiveSelection","selectCells","console","log","row","col","beforeMatches","selections","str","concat","selectionStringBuilder","isOpened","focus","beginEditing","TEXTAREA","style","width","err","finishEditing","close","event","includes","key","getValue","getSelected","editing","preventDefault","stopImmediatePropagation","openedParentheses","closedParentheses","repeat","autoFill","rowData","getDataAtRow","colData","getDataAtCol","pop","Math","max","min","table","r2","c2","preventScrolling","selectionLayerLevel","coords","TD","controller","setDataAtCell","react_default","a","createElement","react_handsontable","ref","settings","beforeKeyDown","afterSelection","afterBeginEditing","beforeOnCellMouseDown","afterOnCellMouseDown","afterOnCellMouseUp","afterCreateCol","afterRemoveCol","afterCreateRow","afterRemoveRow","PureComponent","defaultProps","id","licenseKey","contextMenu","minSpareRows","minSpareCols","manualColumnResize","formulas","stretchH","getTrainingData","a1","math","random","a2","reshape","range","x","add","valueOf","yMulti","y","PredictionModule","state","inputColumnX","inputColumnY","initializeIcons","handleChange","handleTrainAndPredict","handleReset","inputColumn","findIndex","colHeader","column","_this2","otherColumn","map","snakeCase","filter","text","newValue","_this$props","colHeaderIndex","selectColumns","setState","defineProperty","inputColumnXIndex","inputColumnYIndex","_this$state","getColumnIndex","_getTrainingData","MLR","predict","calculateMLR","setData","_this3","_this$state2","styles","mergeStyleSets","item","Stack","gap","padding","horizontal","Item","className","Dropdown","placeholder","ariaLabel","options","getSelectOptions","selectedKeys","onChange","PrimaryButton","onClick","DefaultButton","Component","Wrapper","undefined","setHotTable","hot","root","height","handsOnTable","background","DefaultPalette","white","color","align","handson_table","dropdownMenu","components_PredictionModule","Boolean","location","hostname","ReactDOM","render","components_Wrapper","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b88edd9.chunk.js","sourcesContent":["export const editMode = /=(.*)/;\nexport const addCase = /=|(.*)(,|=|\\*|&|\\/|%|\\+|\\^|\\()/g;\nexport const replaceCase = /=|(.*)(((([A-Z]{1,})\\d{1,}):(([A-Z]{1,})\\d{1,}))|(([A-Z]{1,})\\d{1,}))/g;\nexport const selectable = /^=(.*)(,|=|\\*|&|\\/|%|\\+|\\*|\\^|\\(|((([A-Z]{1,})\\d{1,}):(([A-Z]{1,})\\d{1,}))|(([A-Z]{1,})\\d{1,}))/;\nexport const beforeSelection = /(.*)(=|\\*|&|\\/|%|\\+|\\*|\\^|\\(|(\\),))/g;\nexport const singleSelection = /((([A-Z]{1,})\\d{1,}):(([A-Z]{1,})\\d{1,}))|(([A-Z]{1,})\\d{1,})/g;\n","export const colDiff = {\n  ArrowLeft: -1,\n  ArrowUp: 0,\n  ArrowRight: 1,\n  ArrowDown: 0\n};\nexport const rowDiff = {\n  ArrowLeft: 0,\n  ArrowUp: -1,\n  ArrowRight: 0,\n  ArrowDown: 1\n};\n","import { regex } from \"../constants\";\n\n/**\n * Convert selection number array into string to be written in editor\n * @param {number[][]} selections\n * @param {string[]} rowHeaders\n * @param {string[]} colHeaders\n */\nexport function selectionStringBuilder(selections, rowHeaders, colHeaders) {\n  let str = \"\";\n  selections.forEach(function(selection) {\n    if (selection.length === 2) {\n      str += `${colHeaders[selection[1]]}${rowHeaders[selection[0]]},`;\n    } else {\n      if (selection[0] === selection[2] && selection[1] === selection[3]) {\n        str += `${colHeaders[selection[1]]}${rowHeaders[selection[0]]},`;\n      } else {\n        str += `${colHeaders[selection[1]]}${rowHeaders[selection[0]]}:${\n          colHeaders[selection[3]]\n        }${rowHeaders[selection[2]]},`;\n      }\n    }\n  });\n\n  return str.slice(0, str.length - 1);\n}\n\n/**\n * Detect first non-empty index\n * @param {string[]} data\n * @param {number} start\n * @param {number} unit\n * @param {?number} skipIndex\n */\nexport function detectNextStop(data, start, unit, skipIndex) {\n  let index = start + unit;\n  if (skipIndex && skipIndex === index) {\n    index += unit;\n  }\n  let seekData = !!data[start] ? !!data[index] : false;\n\n  while (1) {\n    if (unit > 0 ? index >= data.length - 1 : index <= 0) {\n      break;\n    }\n    if (skipIndex && skipIndex === index) {\n      index += unit;\n      continue;\n    }\n    if (!!data[index] !== seekData) {\n      break;\n    }\n    index += unit;\n  }\n\n  if (seekData && !data[index]) {\n    index -= unit;\n  }\n\n  return index;\n}\n\n/**\n * Parse cell visual string into number array format\n * @param {string} cell - B4 | B4:C5\n * @param {string[]} rowHeaders\n * @param {string[]} colHeaders\n */\nexport function parseSelection(selection, rowHeaders, colHeaders) {\n  const cols = selection.match(/[A-Z]{1,}/g);\n  const rows = selection.match(/\\d{1,}/g);\n  const selectionArray = [];\n\n  if (rows) {\n    for (let i = 0; i < rows.length; i++) {\n      selectionArray.push(\n        rowHeaders.indexOf(parseInt(rows[i])),\n        colHeaders.indexOf(cols[i])\n      );\n    }\n    return selectionArray;\n  } else {\n    return [];\n  }\n}\n\n/**\n * Add missing closing parentheses\n * @param {string} editorText\n */\nexport function autoFill(editorText) {\n  // Let's ignore +1, we don't need\n  const openedParentheses = editorText.split(\"(\").length;\n  const closedParentheses = editorText.split(\")\").length;\n\n  // Add missing closed parenteses.\n  return editorText + \")\".repeat(openedParentheses - closedParentheses);\n}\n\n/**\n * Get active selection array\n * @param {string} editorText\n * @param {number[]} rowHeaders\n * @param {number[]} colHeaders\n */\nexport function getActiveSelection(editorText, rowHeaders, colHeaders) {\n  // It's selectable status, so let's get the first match with confidence\n  const strBeforeSelection = editorText.match(regex.beforeSelection)[0];\n  const selectionStr = editorText.slice(strBeforeSelection.length);\n  const activeSelection = [];\n\n  /** @type {number[]} */\n  let tempArray;\n\n  selectionStr.split(\",\").forEach(selection => {\n    tempArray = parseSelection(selection, rowHeaders, colHeaders);\n    if (tempArray.length > 0) {\n      activeSelection.push(tempArray);\n    }\n  });\n  return {\n    strBeforeSelection,\n    activeSelection\n  };\n}\n","import React from \"react\";\nimport { HotTable } from \"@handsontable-pro/react\";\n\nimport {\n  selectionStringBuilder,\n  detectNextStop,\n  autoFill,\n  getActiveSelection\n} from \"../utils/helper\";\nimport { regex, table } from \"../constants\";\n\nclass HandsonTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.originValue = \"\";\n    this.editorText = \"\";\n    this.strBeforeSelection = \"\";\n    this.tempValue = null;\n    this.isSelectable = false;\n    this.activeCell = null;\n    this.activeSelection = [];\n    this.activeEditor = null;\n    this.lastSelection = [];\n    this.ongoingSelction = [];\n    this.hotSettings = { ...props };\n    this.hotTable = React.createRef();\n    this.isCtrlKeyDown = false;\n    this.isShiftKeyDown = false;\n    this.selectionMode = \"select\";\n    this.rowHeaders = null;\n    this.colHeaders = null;\n    this.totalRows = props.minRows - 1;\n    this.totalCols = props.minCols - 1;\n\n    this.onDocumentKeyUp = this.onDocumentKeyUp.bind(this);\n    this.parseCellData = this.parseCellData.bind(this);\n    this.activateEditor = this.activateEditor.bind(this);\n    this.completeEditing = this.completeEditing.bind(this);\n    this.handleBeforeKeyDown = this.handleBeforeKeyDown.bind(this);\n    this.handleAfterSelection = this.handleAfterSelection.bind(this);\n    this.handleBeforeOnCellMouseDown = this.handleBeforeOnCellMouseDown.bind(\n      this\n    );\n    this.handleAfterBeginEditing = this.handleAfterBeginEditing.bind(this);\n    this.handleAfterOnCellMouseDown = this.handleAfterOnCellMouseDown.bind(\n      this\n    );\n    this.handleAfterOnCellMouseUp = this.handleAfterOnCellMouseUp.bind(this);\n    this.updateColumnHeaders = this.updateColumnHeaders.bind(this);\n    this.updateRowHeaders = this.updateRowHeaders.bind(this);\n  }\n\n  componentDidMount() {\n    const { setHotInstance } = this.props;\n    setHotInstance(this.hotTable.current.hotInstance);\n\n    this.ctrlOrMeta = window.navigator.platform.match(/^Mac/);\n    this.updateColumnHeaders();\n    this.updateRowHeaders();\n\n    document.addEventListener(\"keyup\", this.onDocumentKeyUp);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keyup\", this.onDocumentKeyUp);\n  }\n\n  /** @param {KeyboardEvent} ev */\n  onDocumentKeyUp(ev) {\n    this.isCtrlKeyDown = this.ctrlOrMeta ? ev.metaKey : ev.ctrlKey;\n    this.isShiftKeyDown = ev.shiftKey;\n  }\n\n  updateColumnHeaders() {\n    if (this.hotTable.current) {\n      this.colHeaders = this.hotTable.current.hotInstance.getColHeader();\n    }\n  }\n\n  updateRowHeaders() {\n    if (this.hotTable.current) {\n      this.rowHeaders = this.hotTable.current.hotInstance.getRowHeader();\n    }\n  }\n\n  /**\n   *\n   * @param {number} r1\n   * @param {number} c1\n   */\n  parseCellData(r1, c1) {\n    this.activeCell = { r1, c1 };\n    this.activeEditor = this.hotTable.current.hotInstance.getActiveEditor();\n    this.originValue = this.isEditing ? (\n      this.hotTable.current.hotInstance.getSourceDataAtCell(r1, c1) || \"\"\n    ).toUpperCase() : \"\";\n\n    this.activeEditor.setValue(this.originValue);\n    this.editorText = this.originValue;\n    this.isSelectable =\n      regex.selectable.test(this.editorText) || this.editorText === \"=\";\n\n    if (this.isSelectable) {\n      const { strBeforeSelection, activeSelection } = getActiveSelection(\n        this.editorText,\n        this.rowHeaders,\n        this.colHeaders\n      );\n\n      this.strBeforeSelection = strBeforeSelection;\n      this.activeSelection = activeSelection;\n      this.hotTable.current.hotInstance.selectCells(this.activeSelection);\n      this.activateEditor();\n    }\n  }\n\n  activateEditor() {\n    console.log('============')\n    try {\n      if (!!this.activeCell) {\n        this.activeEditor.row = this.activeCell.r1;\n        this.activeEditor.col = this.activeCell.c1;\n      }\n      this.editorText = (\n        this.hotTable.current.hotInstance.getSourceDataAtCell(\n          this.activeCell.r1,\n          this.activeCell.c1\n        ) || this.tempValue || \"\"\n      ).toUpperCase();\n      const beforeMatches = this.editorText.match(regex.beforeSelection);\n      this.strBeforeSelection = beforeMatches ? beforeMatches[0] : \"\";\n      this.editorText =\n        this.strBeforeSelection +\n        selectionStringBuilder(\n          this.activeSelection,\n          this.rowHeaders,\n          this.colHeaders\n        );\n      if (this.activeEditor.isOpened()) {\n        // Already opened, don't needs any update.\n        this.activeEditor.focus();\n      } else {\n        this.activeEditor.beginEditing();\n      }\n      this.activeEditor.TEXTAREA.style.width = \"auto\";\n      this.activeEditor.setValue(this.editorText);\n      console.log('---coming here')\n    } catch (err) {\n      console.log(\n        \"** CANNOT ACTIVATE EDITOR **\",\n        err,\n        \"*** Active Editor: \",\n        this.activeEditor,\n        \"*** Active Cell: \",\n        this.activeCell\n      );\n    }\n  }\n\n  completeEditing() {\n    this.activeEditor.finishEditing();\n    this.activeEditor.close();\n    this.activeEditor = null;\n    this.isEditing = false;\n  }\n\n  /** @param {KeyboardEvent} event */\n  handleBeforeKeyDown(event) {\n    this.isCtrlKeyDown = this.ctrlOrMeta ? event.metaKey : event.ctrlKey;\n    this.isShiftKeyDown = event.shiftKey;\n\n    if ([\"Control\", \"Shift\", \"Meta\", \"Alt\"].includes(event.key)) {\n      return;\n    }\n\n    if (!!this.activeEditor) {\n      this.editorText = this.activeEditor.getValue().toUpperCase();\n      this.isSelectable =\n        regex.selectable.test(this.editorText) || this.editorText === \"=\";\n    }\n\n    this.activeSelection = this.hotTable.current.hotInstance.getSelected();\n\n    switch (true) {\n      case event.key === 'F2':\n        this.editing = true;\n        break;\n      case event.key === \"Enter\":\n        if (!!this.activeEditor) {\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          this.activeEditor.setValue(autoFill(this.editorText));\n          this.activeCell.r1 += 1;\n          this.activeSelection = [[this.activeCell.r1, this.activeCell.c1]];\n          this.hotTable.current.hotInstance.selectCells(this.activeSelection);\n          this.completeEditing();\n        } else {\n          this.isEditing = true;\n        }\n        this.tempValue = null;\n        break;\n      case event.key === \"Escape\":\n        if (!!this.activeEditor) {\n          this.activeEditor.setValue(this.originValue);\n          this.completeEditing();\n          this.activeSelection = [[this.activeCell.r1, this.activeCell.c1]];\n          this.hotTable.current.hotInstance.selectCells(this.activeSelection);\n        }\n        this.tempValue = null;\n        this.isEditing = true;\n        break;\n      case [\"ArrowLeft\", \"ArrowRight\", \"ArrowUp\", \"ArrowDown\"].includes(\n        event.key\n      ):\n        // Fetch out the row/col data of editing cell\n        const rowData = this.hotTable.current.hotInstance.getDataAtRow(\n          this.lastSelection[2]\n        );\n        const colData = this.hotTable.current.hotInstance.getDataAtCol(\n          this.lastSelection[3]\n        );\n\n        // Pop up the last selection to modify\n        this.lastSelection = this.activeSelection.pop() || [\n          this.activeCell.r1,\n          this.activeCell.c1,\n          this.activeCell.r1,\n          this.activeCell.c1\n        ];\n\n        switch (true) {\n          case this.isCtrlKeyDown && this.isShiftKeyDown:\n            // Expand the last selection to end of the table or data range\n\n            // Prevent default key event handling, we do custom Formula selection.\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            switch (event.key) {\n              case \"ArrowLeft\":\n                // Expand the selection to first left non-empty/end\n                if (\n                  this.lastSelection[1] === 0 ||\n                  this.lastSelection[3] === 0\n                ) {\n                  // Already expended\n                  break;\n                }\n                this.lastSelection[3] = detectNextStop(\n                  rowData,\n                  this.lastSelection[3],\n                  -1,\n                  !!this.activeEditor &&\n                  this.lastSelection[2] === this.activeCell.r1 &&\n                  this.activeCell.c1\n                );\n                break;\n              case \"ArrowRight\":\n                // Expand the selection to first right non-empty/end\n                if (\n                  this.lastSelection[1] === this.totalCols ||\n                  this.lastSelection[3] === this.totalCols\n                ) {\n                  // Already expended\n                  break;\n                }\n                this.lastSelection[3] = detectNextStop(\n                  rowData,\n                  this.lastSelection[3],\n                  +1,\n                  !!this.activeEditor &&\n                  this.lastSelection[2] === this.activeCell.r1 &&\n                  this.activeCell.c1\n                );\n                break;\n              case \"ArrowDown\":\n                // Expand the selection to first bottom non-empty/end\n                if (\n                  this.lastSelection[0] === this.totalRows ||\n                  this.lastSelection[2] === this.totalRows\n                ) {\n                  // Already expended\n                  break;\n                }\n                this.lastSelection[2] = detectNextStop(\n                  colData,\n                  this.lastSelection[2],\n                  +1,\n                  !!this.activeEditor &&\n                  this.lastSelection[3] === this.activeCell.c1 &&\n                  this.activeCell.r1\n                );\n                break;\n              case \"ArrowUp\":\n                // Expand the selection to first top non-empty/end\n                if (\n                  this.lastSelection[0] === 0 ||\n                  this.lastSelection[2] === 0\n                ) {\n                  // Already expended\n                  break;\n                }\n                this.lastSelection[2] = detectNextStop(\n                  colData,\n                  this.lastSelection[2],\n                  -1,\n                  !!this.activeEditor &&\n                  this.lastSelection[3] === this.activeCell.c1 &&\n                  this.activeCell.r1\n                );\n                break;\n              default:\n                break;\n            }\n            break;\n          case this.isCtrlKeyDown:\n            // Replace the selection to the last non-empty cell or the end of the table.\n\n            // Prevent default key event handling, we do custom Formula selection.\n            event.preventDefault();\n            event.stopImmediatePropagation();\n\n            this.lastSelection[2] = this.lastSelection[0];\n            this.lastSelection[3] = this.lastSelection[1];\n            switch (event.key) {\n              case \"ArrowLeft\":\n                // Replace to left none-empty/end cell\n                this.lastSelection[1] = this.lastSelection[3] = detectNextStop(\n                  rowData,\n                  this.lastSelection[1],\n                  -1,\n                  !!this.activeEditor &&\n                  this.lastSelection[0] === this.activeCell.r1 &&\n                  this.activeCell.c1\n                );\n                break;\n              case \"ArrowRight\":\n                // Replace to right none-empty/end cell\n                this.lastSelection[1] = this.lastSelection[3] = detectNextStop(\n                  rowData,\n                  this.lastSelection[1],\n                  +1,\n                  !!this.activeEditor &&\n                  this.lastSelection[0] === this.activeCell.r1 &&\n                  this.activeCell.c1\n                );\n                break;\n              case \"ArrowDown\":\n                // Replace to bottom none-empty/end cell\n                this.lastSelection[0] = this.lastSelection[2] = detectNextStop(\n                  colData,\n                  this.lastSelection[0],\n                  +1,\n                  !!this.activeEditor &&\n                  this.lastSelection[1] === this.activeCell.c1 &&\n                  this.activeCell.r1\n                );\n                break;\n              case \"ArrowUp\":\n                // Replace to top none-empty/end cell\n                this.lastSelection[0] = this.lastSelection[2] = detectNextStop(\n                  colData,\n                  this.lastSelection[0],\n                  -1,\n                  !!this.activeEditor &&\n                  this.lastSelection[1] === this.activeCell.c1 &&\n                  this.activeCell.r1\n                );\n                break;\n              default:\n                break;\n            }\n            break;\n          case this.isShiftKeyDown:\n            // Expand last selection\n\n            if (!!this.activeEditor) {\n              // Prevent default key event handling, we do custom Formula selection.\n              event.preventDefault();\n              event.stopImmediatePropagation();\n\n              switch (event.key) {\n                case \"ArrowLeft\":\n                  // Expand the selection to left\n                  this.lastSelection[3] = Math.max(\n                    this.lastSelection[3] - 1,\n                    0\n                  );\n                  break;\n                case \"ArrowRight\":\n                  // Expand the selection to right\n                  this.lastSelection[3] = Math.min(\n                    this.lastSelection[3] + 1,\n                    this.totalCols\n                  );\n                  break;\n                case \"ArrowDown\":\n                  // Expand the selection to bottom\n                  this.lastSelection[2] = Math.min(\n                    this.lastSelection[2] + 1,\n                    this.totalRows\n                  );\n                  break;\n                case \"ArrowUp\":\n                  // Expand the selection to top\n                  this.lastSelection[2] = Math.max(\n                    this.lastSelection[2] - 1,\n                    0\n                  );\n                  break;\n                default:\n                  break;\n              }\n            }\n            break;\n          default:\n            if (!!this.activeEditor) {\n              // Prevent default key event handling, we do custom Formula selection.\n              event.preventDefault();\n              event.stopImmediatePropagation();\n\n              // Update lastSelection to (r1, c1) + key\n              this.lastSelection[0] += table.rowDiff[event.key];\n              this.lastSelection[1] += table.colDiff[event.key];\n              this.lastSelection[2] = this.lastSelection[0];\n              this.lastSelection[3] = this.lastSelection[1];\n\n              if (!regex.editMode.test(this.editorText)) {\n                // Ctrl/Shift key is not pressed, clear active selection and update it to last selection.\n                this.activeSelection = [];\n                this.activeEditor = null;\n                this.activeCell = {\n                  r1: this.lastSelection[0],\n                  c1: this.lastSelection[1]\n                };\n              }\n            }\n            break;\n        }\n\n        // Update the selection\n        this.activeSelection.push(this.lastSelection.slice(0));\n        this.hotTable.current.hotInstance.selectCells(\n          this.activeSelection,\n          false\n        );\n        if (!!this.activeEditor) {\n          this.activateEditor();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *\n   * @param {number} r1\n   * @param {number} c1\n   * @param {number} r2\n   * @param {number} c2\n   * @param {object} preventScrolling\n   * @param {number} selectionLayerLevel\n   */\n  handleAfterSelection(r1, c1, r2, c2, preventScrolling, selectionLayerLevel) {\n    this.lastSelection = [r1, c1, r2, c2];\n    this.activeSelection = this.hotTable.current.hotInstance.getSelected();\n\n    if (!!this.activeEditor) {\n      this.editorText = this.tempValue || (\n        this.hotTable.current.hotInstance.getSourceDataAtCell(\n          this.activeCell.r1,\n          this.activeCell.c1\n        ) || \"\"\n      ).toUpperCase();\n      this.isSelectable =\n        regex.selectable.test(this.editorText) || this.editorText === \"=\";\n    }\n  }\n\n  /**\n   *\n   * @param {number} r1\n   * @param {number} c1\n   */\n  handleAfterBeginEditing(r1, c1) {\n    if (!this.activeEditor) {\n      this.parseCellData(r1, c1);\n    }\n  }\n\n  handleBeforeOnCellMouseDown(event, coords, TD, controller) {\n    if (!!this.activeEditor) {\n      this.editorText = this.activeEditor.getValue();\n      this.tempValue = this.editorText;\n      this.hotTable.current.hotInstance.setDataAtCell(\n        this.activeCell.r1,\n        this.activeCell.c1,\n        \"\"\n      );\n    }\n  }\n\n  /**\n   *\n   * @param {MouseEvent} event\n   * @param {object} coords\n   * @param {Element} TD\n   */\n  handleAfterOnCellMouseDown(event, coords, TD) {\n    this.ongoingSelction[0] = coords.row;\n    this.ongoingSelction[1] = coords.col;\n    this.ongoingSelction[2] = coords.row;\n    this.ongoingSelction[3] = coords.col;\n\n    if (!!this.activeEditor) {\n      this.isSelectable =\n        regex.selectable.test(this.editorText) || this.editorText === \"=\";\n\n      if (!this.isSelectable) {\n        this.activeEditor.setValue(this.originValue);\n        this.completeEditing();\n        console.log(\"============ Complete Editing ============\");\n        return;\n      }\n    }\n\n    switch (true) {\n      case this.isCtrlKeyDown:\n        // Ctrl Key is down, add new selection to existing one\n        this.activeSelection.push(this.ongoingSelction.slice(0));\n        break;\n      case this.isShiftKeyDown:\n        // Needs to rewrie last selection.\n        break;\n      default:\n        this.activeSelection = [this.ongoingSelction.slice(0)];\n        break;\n    }\n    this.selectionMode = \"replace\";\n  }\n\n  /**\n   *\n   * @param {MouseEvent} event\n   * @param {object} coords\n   * @param {Element} TD\n   */\n  handleAfterOnCellMouseUp(event, coords, TD) {\n    this.selectionMode = \"waiting\";\n\n    if (!!this.activeEditor) {\n      if (this.tempValue) {\n\n      }\n      this.activateEditor();\n    }\n  }\n\n  render() {\n    return (\n      <HotTable\n        ref={this.hotTable}\n        settings={this.hotSettings}\n        beforeKeyDown={this.handleBeforeKeyDown}\n        afterSelection={this.handleAfterSelection}\n        afterBeginEditing={this.handleAfterBeginEditing}\n        beforeOnCellMouseDown={this.handleBeforeOnCellMouseDown}\n        afterOnCellMouseDown={this.handleAfterOnCellMouseDown}\n        afterOnCellMouseUp={this.handleAfterOnCellMouseUp}\n        afterCreateCol={this.updateColumnHeaders}\n        afterRemoveCol={this.updateColumnHeaders}\n        afterCreateRow={this.updateRowHeaders}\n        afterRemoveRow={this.updateRowHeaders}\n      />\n    );\n  }\n}\n\nHandsonTable.defaultProps = {\n  id: \"hot\",\n  licenseKey: \"00000-00000-00000-00000-00000\",\n  data: [[]],\n  minRows: 10,\n  minCols: 26,\n  colHeaders: true,\n  rowHeaders: true,\n  contextMenu: true,\n  minSpareRows: 1,\n  minSpareCols: 1,\n  manualColumnResize: true,\n  formulas: true,\n  selectionMode: \"multiple\",\n  stretchH: \"all\",\n  setHotInstance: () => {},\n};\n\nexport default HandsonTable;\n","import math from 'mathjs';\nimport MLR from 'ml-regression-multivariate-linear';\nimport PolynomialRegression from 'ml-regression-polynomial';\nimport {\n  RandomForestRegression as RFR,\n  // RandomForestClassifier as RFC,\n} from 'ml-random-forest';\n// import LR from 'ml-regression-simple-linear';\n\nexport function getTrainingData() {\n  const a1 = math.random([10, 2]);\n  const a2 = math.reshape(math.range(0, 20, 1), [10, 2]);\n  const x = math.add(a1, a2).valueOf();\n  const yMulti = [];\n\n  const y = [];\n  for (let i = 0; i < 5; i += 1) {\n    y.push(0);\n  }\n\n  for (let i = 5; i < 10; i += 1) {\n    y.push(1);\n  }\n\n\n  for (let i = 0; i < 5; i += 1) {\n    yMulti.push([0]);\n  }\n\n  for (let i = 5; i < 10; i += 1) {\n    yMulti.push([1]);\n  }\n\n  return {\n    x,\n    y: yMulti,\n  };\n}\n\n\nexport function calculateMLR() {\n  const { x, y } = getTrainingData();\n  const mlr = new MLR(x, y);\n\n  return mlr.predict([[3, 3], [4, 4]]);\n}\n\nexport function calculatePolynomialRegression() {\n  const { x, y } = getTrainingData();\n  const poly = new PolynomialRegression(x, y, 2);\n\n  return poly.predict([[3, 3], [4, 4]]);\n}\n\nexport function calculateRFR() {\n  const { x, y } = getTrainingData();\n  const RFoptions = {\n    seed: 3,\n    maxFeatures: 2,\n    replacement: false,\n    nEstimators: 100,\n  };\n  const rfr = new RFR(RFoptions);\n\n  rfr.train(x, y);\n\n  return rfr.predict([[3, 3], [4, 4]]);\n}\n","import React from 'react';\nimport { snakeCase } from 'lodash';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\nimport { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';\nimport { initializeIcons } from '@uifabric/icons';\nimport { calculateMLR } from '../functions/machine-learning-functions.js';\n\ntype Props = {\n  hotInstance?: {},\n  colHeaders?: Array,\n};\n\nclass PredictionModule extends React.Component<Props> {\n  state = {\n    inputColumnX: '',\n    inputColumnY: '',\n  };\n\n  constructor(props) {\n    super(props);\n\n    initializeIcons();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleTrainAndPredict = this.handleTrainAndPredict.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n\n  getColumnIndex(inputColumn) {\n    const { colHeaders } = this.props;\n\n    return colHeaders.findIndex(colHeader => colHeader === inputColumn);\n  }\n\n\n  getSelectOptions(column: string) {\n    const { colHeaders: originalColHeaders } = this.props;\n    let colHeaders = originalColHeaders.slice(0);\n    const otherColumn = column === 'inputColumnX' ? 'inputColumnY' : 'inputColumnX';\n\n    return colHeaders\n      .map(colHeader => (\n        (colHeader === 'No' || this.state[otherColumn] === snakeCase(colHeader))\n          ? false\n          : colHeader\n      ))\n      .filter(colHeader => !!colHeader)\n      .map(colHeader => ({\n        key: snakeCase(colHeader),\n        text: colHeader,\n      }));\n  }\n\n\n  handleChange(column, newValue) {\n    const { hotInstance, colHeaders } = this.props;\n    const colHeaderIndex = colHeaders.findIndex(\n      colHeader => colHeader === newValue.text,\n    );\n\n    hotInstance.selectColumns(colHeaderIndex);\n\n    this.setState({\n      [column]: newValue.key,\n    });\n  }\n\n\n  handleTrainAndPredict() {\n    const { inputColumnX, inputColumnY } = this.state;\n    let inputColumnXIndex;\n    let inputColumnYIndex;\n\n    if (inputColumnX) {\n      inputColumnXIndex = this.getColumnIndex(inputColumnX);\n    }\n\n    if (inputColumnY) {\n      inputColumnYIndex = this.getColumnIndex(inputColumnY);\n    }\n\n    console.log(inputColumnXIndex, inputColumnYIndex);\n    // if ()\n    calculateMLR();\n  }\n\n\n  handleReset() {\n    const { hotInstance } = this.props;\n\n    this.data = [[]];\n    hotInstance.setData(this.data);\n  }\n\n\n  render() {\n    const { inputColumnX, inputColumnY } = this.state;\n    const styles = mergeStyleSets({\n      item: {\n        width: '49%',\n      },\n    });\n\n    return (\n      <div>\n        <div>\n          <h1>Predict</h1>\n          <hr />\n\n          <h2>Input</h2>\n          <hr />\n\n          <Stack gap={5} padding={10} horizontal>\n            <Stack.Item className={styles.item}>\n              <span>Input Data X</span>\n            </Stack.Item>\n\n            <Stack.Item className={styles.item}>\n              <Dropdown\n                className=\"the-dropdown\"\n                placeholder=\"Select a column\"\n                ariaLabel=\"Input Data dropdown\"\n                options={this.getSelectOptions('inputColumnX')}\n                selectedKeys={inputColumnX}\n                onChange={(event, newValue) => this.handleChange('inputColumnX', newValue)}\n              />\n            </Stack.Item>\n          </Stack>\n\n          <Stack gap={5} padding={10} horizontal>\n            <Stack.Item className={styles.item}>\n              <span>Input Data Y</span>\n            </Stack.Item>\n\n            <Stack.Item className={styles.item}>\n              <Dropdown\n                className=\"the-dropdown\"\n                placeholder=\"Select a column\"\n                ariaLabel=\"Input Data dropdown\"\n                options={this.getSelectOptions('inputColumnY')}\n                selectedKeys={inputColumnY}\n                onChange={(event, newValue) => this.handleChange('inputColumnY', newValue)}\n              />\n            </Stack.Item>\n          </Stack>\n\n\n          <Stack horizontal gap={5} padding={10}>\n            <Stack.Item className={styles.item}>\n              <PrimaryButton onClick={this.handleTrainAndPredict}>\n                Train and Predict\n              </PrimaryButton>\n            </Stack.Item>\n\n            <Stack.Item className={styles.item}>\n              <DefaultButton onClick={this.handleReset}>\n                Reset\n              </DefaultButton>\n            </Stack.Item>\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n}\n\nPredictionModule.defaultProps = {\n  colHeaders: [],\n  hotInstance: {},\n};\n\n\nexport default PredictionModule;\n","import React from 'react';\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\nimport { mergeStyleSets, DefaultPalette } from 'office-ui-fabric-react/lib/Styling';\nimport HandsonTable from '../handson-table/handson-table';\nimport PredictionModule from './PredictionModule.js';\nimport ModelComplexityWrapper from './ModelComplexityWrapper.js';\n\n\nclass Wrapper extends React.Component {\n  state = {\n    hotInstance: null,\n  };\n\n  hotInstance = null;\n\n  colHeaders = [\n    'No',\n    'X',\n    'Y',\n    'Y Predicate',\n  ];\n\n  data = [\n    [0, 0.23810040097628, 0, -0.058454112947846],\n    [1, 1.21536552242826, 2, 1.83215286261689],\n    [2, 2.26513724361689, 4, 3.86303035457224],\n    [3, 3.23616297045918, 6, 5.7415666619903],\n    [4, 4.88376460787225, 8, 8.92899971395165],\n    [5, 5.51711745109835, 10, 10.1542775603747],\n    [6, 6.53964933710862, 12, 12.1324571495082],\n    [7, 7.33261437350318, undefined, 13.6665190906108],\n    [8, 8.2317459965478, 16, 15.4059698099339],\n    [9, 9.07053580527441, undefined, 17.0286838806612],\n  ];\n\n\n  constructor(props) {\n    super(props);\n\n    this.setHotTable = this.setHotTable.bind(this);\n  }\n\n\n  setHotTable(hotInstance) {\n    this.setState({ hotInstance });\n    window.hot = hotInstance;\n  }\n\n\n  render() {\n    const styles = mergeStyleSets({\n      root: {\n        height: '100vh',\n      },\n      handsOnTable: {\n        width: '49%',\n        padding: '20px',\n        background: DefaultPalette.white,\n      },\n      predict: {\n        color: DefaultPalette.white,\n        background: '#9fa5b3',\n        width: '49%',\n        padding: '10px',\n      },\n    });\n\n    const { hotInstance } = this.state;\n\n    return (\n      <div>\n        <Stack\n          className={styles.root}\n          horizontal\n        >\n          <Stack.Item align=\"stretch\" className={styles.handsOnTable}>\n            <HandsonTable\n              data={this.data}\n              colHeaders={this.colHeaders}\n              minRows={6}\n              minCols={4}\n              dropdownMenu={1}\n              licenseKey=\"00000-00000-00000-00000-00000\"\n              setHotInstance={this.setHotTable}\n            />\n          </Stack.Item>\n\n          <Stack.Item align=\"stretch\" className={styles.predict}>\n            <PredictionModule\n              hotInstance={hotInstance}\n              data={this.data}\n              colHeaders={this.colHeaders}\n            />\n          </Stack.Item>\n        </Stack>\n        {/* <ModelComplexityWrapper /> */}\n      </div>\n    );\n  }\n}\n\nexport default Wrapper;\n","import * as React from 'react';\n// import { Checkmark } from 'office-ui-fabric-react/lib/Icons/Checkmark';\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\nimport { Modal } from 'office-ui-fabric-react/lib/Modal';\n\ntype Props = {};\n\ntype State = {\n  value: number,\n  modelComplexitySelection: boolean,\n};\n\nclass ModelComplexity extends React.Component<Props, State> {\n  state = {\n    sliderValue: 0,\n    modelComplexitySelection: false,\n    isModalVisible: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n  }\n\n\n  handleCheckboxChange(event) {\n    const { currentTarget } = event;\n    const { checked } = currentTarget;\n\n    this.setState({ modelComplexitySelection: checked });\n  }\n\n\n  render() {\n    const {\n      sliderValue,\n      modelComplexitySelection,\n      isModalVisible,\n    } = this.state;\n\n    const sliderTextValue = sliderValue < 7\n      ? sliderValue : sliderValue === 7\n      ? 'Random Forest' : 'Neural';\n\n    return (\n      <div>\n        <div>\n          <Checkbox\n            label=\"AI Model Complexity Selection\"\n            value={modelComplexitySelection}\n            onChange={this.handleCheckboxChange}\n            checked={modelComplexitySelection}\n          />\n        </div>\n\n        <Modal\n          titleAriaId=\"title aria id\"\n          subtitleAriaId=\"sub title aria id\"\n          isOpen={isModalVisible}\n          onDismiss={event => this.setState({ isModalVisible: false })}\n          isBlocking={false}\n          containerClassName=\"ms-modal-example-container\"\n        >\n          {!modelComplexitySelection && (\n            <div>\n              <label>\n                Smoothness/Complexity\n              </label>\n              <Slider\n                label={`Complexity: ${sliderTextValue}`}\n                min={0}\n                max={8}\n                step={1}\n                showValue={0}\n                value={sliderValue}\n                onChange={newValue => this.setState({ sliderValue: newValue })}\n              />\n            </div>\n          )}\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ModelComplexity;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n// import PredictionModule from './components/PredictionModule';\n// import mi from './functions/machine-learning.js';\n// import ModelComplexity from './components/ModelComplexity.js';\nimport Wrapper from './components/Wrapper.js';\nimport 'handsontable-pro/dist/handsontable.full.css';\n\n\nexport default () => {\n  return (\n    <div>\n      <Wrapper />\n      {/*\n        <ModelComplexity />\n      */}\n    </div>\n  );\n};\n"],"sourceRoot":""}